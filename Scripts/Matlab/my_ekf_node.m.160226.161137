function [x_cc,E_cc]= my_ekf_node(x_pp,u,z)
% Original code: By Yi Cao at Cranfield University, 02/01/2008
% Modified by: Rabbia Asgahr specific to Odometry, 15/02/2016
% Modified further: specific to ROS node, 19/2/2016
% EKF   Extended Kalman Filter for localization of a robot (nonlinear
% dynamic systems)
% [x_cc,E_cc]= my_ekf_node(x_pp,u,z) returns state estimate, x and state covariance, P 
% for nonlinear dynamic system:
%           x_k = f(x_k-1, u_k-1) + w_k
%           z_k   = h(x_k) + v_k
% where w ~ N(0,Q) meaning w is gaussian noise with covariance Q
%       v ~ N(0,R) meaning v is gaussian noise with covariance R
% Inputs:   x_pp: "a priori" state estimate, x_k-1|k-1 (p refers to k-1)  
%           u: control input, u_k-1 (only for simulation here, originally
%           node will receive nL and nR
%           z: current measurement
% Output:   x_cc: "a posteriori" state estimate, x_k|k (c refers to k) 
%           E_cc: "a posteriori" state covariance, E_k|k (c refers to k) 
%

%% preinitialized variables and functions in the system

n=3;      %number of states

%however Q will need to be modeled in actual system
q=0.1;    %std of process noise  
r=0.1;    %std of measurement noise
Q=q^2*eye(n); % process noise covariance 
R=r^2*eye(n); % measurement noise covariance

%% calculations for u in the node
% SL = dt * (nL / 60) * 2 * pi * rL; % Linear distance traveled by left wheel in meters
% SR = dt * (nR / 60) * 2 * pi * rR; % Linear distance traveled by right wheel in meters
% del_theta = (SL - SR) / 2; %u(2)
% del_S = (SL + SR) / 2; % u(1)
% u = [del_S,  del_theta];

%% functions and jacobians
f_xu = [x_pp(1) + u(1)*cos(x_pp(3) - (u(2)/2)); x_pp(2) + u(1)*sin(x_pp(3) - (u(2)/2)); x_pp(3) - u(2)];  % nonlinear state equations, f(x_k-1,u_k-1)
h_x = [x_pp(1); x_pp(2); x_pp(3)];                  % measurement equation, h(x_k)

Jf_xu = [1, 0, - u(1)*sin(x_pp(3) - (u(2)/2)); 0, 1, u(1)*cos(x_pp(3) - (u(2)/2)); 0, 0, 1]; %Jacobian matrix with the partial derivatives of f(x_k-1,u_k-1) w.r.t x
Jh = eye(n); %Jacobian matrix with the partial derivatives of h(x_k) w.r.t x, identity for our system

%E_pp: "a priori" estimated state covariance, E_k-1|k-1 (p refers to k-1) 
persistent E_pp;
if isempty(E_pp) 
    E_pp = eye(n);            % initial state covraiance
end


%% PREDICTION UPDATE
%nonlinear update and linearization at current state
x_cp = f_xu; %state prediction, x_k|k-1
Jf = Jf_xu;

%partial covariance update
E_cp = Jf*E_pp*Jf' + Q;  %E_k|k-1              

%% INNOVATION UPDATE
%nonlinear measurement and linearization   
z_estimate = h_x;

P12=E_cp*Jh'; %cross covariance
S_inv = inv(Jh*P12+R);
%M_inv = matrix3by3_inverse(H*P12+R)
H = P12*S_inv;      %Kalman filter gain, H_k

x_cc = x_cp + H*(z-z_estimate);     %state estimate, x_k|k;
E_cc = E_cp - H*P12';               %state covariance matrix, E_k|k

% update E_cp for next loop
E_pp = E_cc; 